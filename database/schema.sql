-- =============================================
-- OCEAN PET - Database Schema
-- MySQL/MariaDB
-- =============================================

-- T·∫°o database
CREATE DATABASE IF NOT EXISTS ocean_pet CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE ocean_pet;

-- =============================================
-- B·∫¢NG USERS - Qu·∫£n l√Ω ng∆∞·ªùi d√πng
-- =============================================
CREATE TABLE IF NOT EXISTS users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255),  -- NULL n·∫øu ƒëƒÉng nh·∫≠p qua OAuth
    avatar_url TEXT,
    provider ENUM('email', 'google', 'facebook') DEFAULT 'email',
    provider_id VARCHAR(255),  -- ID t·ª´ Google/Facebook
    is_verified BOOLEAN DEFAULT FALSE,
    otp_code VARCHAR(6),
    otp_expires_at DATETIME,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_provider (provider, provider_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- B·∫¢NG PETS - Th√¥ng tin th√∫ c∆∞ng
-- =============================================
CREATE TABLE IF NOT EXISTS pets (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(100) NOT NULL,  -- M√®o, Ch√≥, C√°, R·∫Øn, R√πa, Heo, Th·ªè, V·∫πt, Hamster
    breed VARCHAR(255),  -- Gi·ªëng
    age INT,  -- Tu·ªïi (th√°ng)
    weight DECIMAL(5,2),  -- C√¢n n·∫∑ng (kg)
    gender ENUM('male', 'female', 'unknown') DEFAULT 'unknown',
    avatar_url TEXT,
    notes TEXT,  -- Ghi ch√∫
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_user_id (user_id),
    INDEX idx_type (type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- B·∫¢NG FOLDERS - Th∆∞ m·ª•c nh·∫≠t k√Ω (t·ª´ pets ƒë√£ ch·ªçn)
-- =============================================
CREATE TABLE IF NOT EXISTS folders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    name VARCHAR(255) NOT NULL,  -- T√™n th∆∞ m·ª•c (t√™n th√∫ c∆∞ng)
    icon VARCHAR(50),  -- Icon ƒë·∫°i di·ªán
    color VARCHAR(20),  -- M√†u s·∫Øc
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_user_id (user_id),
    UNIQUE KEY unique_user_folder (user_id, name)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- B·∫¢NG DIARY_ENTRIES - Nh·∫≠t k√Ω chƒÉm s√≥c
-- =============================================
CREATE TABLE IF NOT EXISTS diary_entries (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    folder_id INT,  -- Th∆∞ m·ª•c (th√∫ c∆∞ng)
    title VARCHAR(255) NOT NULL,
    description TEXT,
    category ENUM('ƒÇn u·ªëng', 'S·ª©c kh·ªèe', 'Vui ch∆°i', 'T·∫Øm r·ª≠a') NOT NULL,
    entry_date DATE NOT NULL,
    entry_time TIME NOT NULL,
    bg_color VARCHAR(20),  -- M√†u n·ªÅn
    has_password BOOLEAN DEFAULT FALSE,
    password VARCHAR(255),  -- M·∫≠t kh·∫©u b·∫£o v·ªá (ƒë√£ hash)
    is_deleted BOOLEAN DEFAULT FALSE,
    deleted_at TIMESTAMP NULL,  -- Th·ªùi gian x√≥a (v√†o th√πng r√°c)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (folder_id) REFERENCES folders(id) ON DELETE SET NULL,
    INDEX idx_user_id (user_id),
    INDEX idx_folder_id (folder_id),
    INDEX idx_category (category),
    INDEX idx_is_deleted (is_deleted),
    INDEX idx_entry_date (entry_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- B·∫¢NG DIARY_IMAGES - H√¨nh ·∫£nh trong nh·∫≠t k√Ω
-- =============================================
CREATE TABLE IF NOT EXISTS diary_images (
    id INT PRIMARY KEY AUTO_INCREMENT,
    diary_entry_id INT NOT NULL,
    image_url TEXT NOT NULL,
    display_order INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (diary_entry_id) REFERENCES diary_entries(id) ON DELETE CASCADE,
    INDEX idx_diary_entry_id (diary_entry_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- B·∫¢NG APPOINTMENTS - L·ªãch h·∫πn chƒÉm s√≥c
-- =============================================
CREATE TABLE IF NOT EXISTS appointments (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    pet_id INT,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    appointment_date DATE NOT NULL,
    appointment_time TIME NOT NULL,
    location VARCHAR(255),
    service_type ENUM('Kh√°m s·ª©c kh·ªèe', 'Ti√™m ph√≤ng', 'Grooming', 'Hu·∫•n luy·ªán', 'Kh√°c') NOT NULL,
    status ENUM('pending', 'confirmed', 'completed', 'cancelled') DEFAULT 'pending',
    reminder_sent BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (pet_id) REFERENCES pets(id) ON DELETE SET NULL,
    INDEX idx_user_id (user_id),
    INDEX idx_pet_id (pet_id),
    INDEX idx_appointment_date (appointment_date),
    INDEX idx_status (status)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- B·∫¢NG HEALTH_RECORDS - H·ªì s∆° s·ª©c kh·ªèe
-- =============================================
CREATE TABLE IF NOT EXISTS health_records (
    id INT PRIMARY KEY AUTO_INCREMENT,
    pet_id INT NOT NULL,
    record_type ENUM('vaccination', 'checkup', 'medication', 'surgery', 'other') NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    veterinarian VARCHAR(255),
    clinic VARCHAR(255),
    record_date DATE NOT NULL,
    next_appointment_date DATE,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (pet_id) REFERENCES pets(id) ON DELETE CASCADE,
    INDEX idx_pet_id (pet_id),
    INDEX idx_record_type (record_type),
    INDEX idx_record_date (record_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- B·∫¢NG FEEDING_SCHEDULE - L·ªãch cho ƒÉn
-- =============================================
CREATE TABLE IF NOT EXISTS feeding_schedule (
    id INT PRIMARY KEY AUTO_INCREMENT,
    pet_id INT NOT NULL,
    meal_time TIME NOT NULL,
    food_type VARCHAR(255),
    quantity VARCHAR(100),  -- S·ªë l∆∞·ª£ng (gram, ml...)
    notes TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (pet_id) REFERENCES pets(id) ON DELETE CASCADE,
    INDEX idx_pet_id (pet_id),
    INDEX idx_is_active (is_active)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- B·∫¢NG NOTIFICATIONS - Th√¥ng b√°o
-- =============================================
CREATE TABLE IF NOT EXISTS notifications (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type ENUM('appointment', 'feeding', 'health', 'general') NOT NULL,
    related_id INT,  -- ID c·ªßa appointment, feeding, etc.
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_user_id (user_id),
    INDEX idx_is_read (is_read),
    INDEX idx_type (type)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- =============================================
-- D·ªÆ LI·ªÜU M·∫™U (Sample Data)
-- =============================================

-- Th√™m user m·∫´u
INSERT INTO users (name, email, password, provider, is_verified) VALUES
('Admin User', 'admin@oceanpet.com', '$2b$10$abcdefghijklmnopqrstuvwxyz123456', 'email', TRUE),
('Nguy·ªÖn VƒÉn A', 'nguyenvana@gmail.com', '$2b$10$abcdefghijklmnopqrstuvwxyz123456', 'email', TRUE),
('Test User', 'test@oceanpet.com', '$2b$10$abcdefghijklmnopqrstuvwxyz123456', 'email', TRUE);

-- Th√™m th√∫ c∆∞ng m·∫´u
INSERT INTO pets (user_id, name, type, breed, age, weight, gender) VALUES
(2, 'Mochi', 'Ch√≥', 'Poodle', 24, 5.5, 'female'),
(2, 'Miu Miu', 'M√®o', 'British Shorthair', 18, 4.2, 'female'),
(2, 'Nemo', 'C√°', 'C√° v√†ng', 6, 0.1, 'unknown');

-- Th√™m th∆∞ m·ª•c m·∫´u (t·ª´ pets ƒë√£ ch·ªçn)
INSERT INTO folders (user_id, name, icon, color) VALUES
(2, 'Ch√≥', 'üêï', '#8B5CF6'),
(2, 'M√®o', 'üê±', '#EC4899'),
(2, 'C√°', 'üê†', '#60A5FA');

-- Th√™m nh·∫≠t k√Ω m·∫´u
INSERT INTO diary_entries (user_id, folder_id, title, description, category, entry_date, entry_time) VALUES
(2, 1, 'Mochi ƒÉn s√°ng', 'Mochi ƒë√£ ƒÉn 100g th·ª©c ƒÉn kh√¥ v√† u·ªëng n∆∞·ªõc', 'ƒÇn u·ªëng', '2025-09-17', '08:00:00'),
(2, 1, 'T·∫Øm cho Mochi', 'T·∫Øm v√† ch·∫£i l√¥ng cho Mochi', 'T·∫Øm r·ª≠a', '2025-09-17', '14:00:00'),
(2, 1, 'Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥', 'Ki·ªÉm tra s·ª©c kh·ªèe t·ªïng qu√°t t·∫°i ph√≤ng kh√°m', 'S·ª©c kh·ªèe', '2025-09-15', '10:00:00'),
(2, 1, 'Ch∆°i ƒë√πa ngo√†i tr·ªùi', 'Mochi ch∆°i v·ªõi b√≥ng v√† ch·∫°y nh·∫£y 30 ph√∫t', 'Vui ch∆°i', '2025-09-14', '17:00:00');

-- Th√™m l·ªãch h·∫πn m·∫´u
INSERT INTO appointments (user_id, pet_id, title, description, appointment_date, appointment_time, location, service_type, status) VALUES
(2, 1, 'Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥', 'Ki·ªÉm tra t·ªïng qu√°t cho Mochi', '2025-09-20', '10:00:00', 'Ph√≤ng kh√°m Pet Care', 'Kh√°m s·ª©c kh·ªèe', 'confirmed'),
(2, 1, 'Ti√™m ph√≤ng d·∫°i ·ª©ng', 'Ti√™m ph√≤ng b·ªánh d·∫°i cho Mochi', '2025-09-25', '14:00:00', 'Ph√≤ng kh√°m Pet Care', 'Ti√™m ph√≤ng', 'pending');

-- =============================================
-- STORED PROCEDURES
-- =============================================

-- Procedure: T·ª± ƒë·ªông x√≥a c√°c entries trong th√πng r√°c sau 30 ng√†y
DELIMITER //
CREATE PROCEDURE CleanupTrashedEntries()
BEGIN
    DELETE FROM diary_entries 
    WHERE is_deleted = TRUE 
    AND deleted_at < DATE_SUB(NOW(), INTERVAL 30 DAY);
END //
DELIMITER ;

-- Procedure: L·∫•y t·∫•t c·∫£ nh·∫≠t k√Ω c·ªßa user (kh√¥ng bao g·ªìm ƒë√£ x√≥a)
DELIMITER //
CREATE PROCEDURE GetUserDiaryEntries(IN p_user_id INT)
BEGIN
    SELECT 
        de.*,
        f.name as folder_name,
        GROUP_CONCAT(di.image_url) as images
    FROM diary_entries de
    LEFT JOIN folders f ON de.folder_id = f.id
    LEFT JOIN diary_images di ON de.id = di.diary_entry_id
    WHERE de.user_id = p_user_id 
    AND de.is_deleted = FALSE
    GROUP BY de.id
    ORDER BY de.entry_date DESC, de.entry_time DESC;
END //
DELIMITER ;

-- Procedure: L·∫•y entries trong th√πng r√°c
DELIMITER //
CREATE PROCEDURE GetTrashedEntries(IN p_user_id INT)
BEGIN
    SELECT 
        de.*,
        DATEDIFF(DATE_ADD(de.deleted_at, INTERVAL 30 DAY), NOW()) as days_left
    FROM diary_entries de
    WHERE de.user_id = p_user_id 
    AND de.is_deleted = TRUE
    AND de.deleted_at > DATE_SUB(NOW(), INTERVAL 30 DAY)
    ORDER BY de.deleted_at DESC;
END //
DELIMITER ;

-- =============================================
-- EVENTS (T·ª± ƒë·ªông ch·∫°y)
-- =============================================

-- Event: T·ª± ƒë·ªông d·ªçn d·∫πp th√πng r√°c m·ªói ng√†y
SET GLOBAL event_scheduler = ON;

CREATE EVENT IF NOT EXISTS daily_cleanup_trash
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_DATE + INTERVAL 1 DAY + INTERVAL 2 HOUR
DO
    CALL CleanupTrashedEntries();

-- =============================================
-- VIEWS
-- =============================================

-- View: Th·ªëng k√™ t·ªïng quan c·ªßa user
CREATE OR REPLACE VIEW user_statistics AS
SELECT 
    u.id as user_id,
    u.name,
    COUNT(DISTINCT p.id) as total_pets,
    COUNT(DISTINCT de.id) as total_diary_entries,
    COUNT(DISTINCT a.id) as total_appointments,
    COUNT(DISTINCT CASE WHEN de.entry_date = CURDATE() THEN de.id END) as today_entries
FROM users u
LEFT JOIN pets p ON u.id = p.user_id
LEFT JOIN diary_entries de ON u.id = de.user_id AND de.is_deleted = FALSE
LEFT JOIN appointments a ON u.id = a.user_id
GROUP BY u.id;

-- =============================================
-- INDEXES OPTIMIZATION
-- =============================================

-- Th√™m indexes cho performance
CREATE INDEX idx_diary_user_date ON diary_entries(user_id, entry_date, is_deleted);
CREATE INDEX idx_appointments_user_date ON appointments(user_id, appointment_date, status);

-- =============================================
-- PERMISSIONS
-- =============================================

-- T·∫°o user cho backend application
-- CREATE USER 'ocean_pet_app'@'localhost' IDENTIFIED BY 'your_secure_password';
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ocean_pet.* TO 'ocean_pet_app'@'localhost';
-- FLUSH PRIVILEGES;

-- =============================================
-- BACKUP REMINDER
-- =============================================
-- Nh·ªõ backup database ƒë·ªãnh k·ª≥:
-- mysqldump -u root -p ocean_pet > backup_ocean_pet_$(date +%Y%m%d).sql
